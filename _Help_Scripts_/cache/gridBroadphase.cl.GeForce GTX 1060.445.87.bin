//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: UNKNOWN
// Unknown Toolkit Version
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_61, texmode_independent
.address_size 64

	// .globl	kCalcHashAABB
// kFindCellStart$sharedHash has been demoted

.entry kCalcHashAABB(
	.param .u32 kCalcHashAABB_param_0,
	.param .u64 .ptr .global .align 16 kCalcHashAABB_param_1,
	.param .u64 .ptr .global .align 4 kCalcHashAABB_param_2,
	.param .u64 .ptr .global .align 8 kCalcHashAABB_param_3,
	.param .u64 .ptr .global .align 16 kCalcHashAABB_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<11>;


	ld.param.u32 	%r2, [kCalcHashAABB_param_0];
	ld.param.u64 	%rd1, [kCalcHashAABB_param_1];
	ld.param.u64 	%rd2, [kCalcHashAABB_param_2];
	ld.param.u64 	%rd3, [kCalcHashAABB_param_3];
	ld.param.u64 	%rd4, [kCalcHashAABB_param_4];
	mov.b32	%r3, %envreg3;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mad.lo.s32 	%r6, %r4, %r5, %r3;
	mov.u32 	%r7, %tid.x;
	add.s32 	%r1, %r6, %r7;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.u32 	%r8, [%rd6];
	shl.b32 	%r9, %r8, 1;
	mul.wide.s32 	%rd7, %r9, 16;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.v4.f32 	{%f7, %f8, %f9, %f10}, [%rd8];
	ld.global.v4.f32 	{%f12, %f13, %f14, %f15}, [%rd8+16];
	add.f32 	%f17, %f7, %f12;
	mul.f32 	%f18, %f17, 0f3F000000;
	add.f32 	%f21, %f8, %f13;
	mul.f32 	%f22, %f21, 0f3F000000;
	add.f32 	%f25, %f9, %f14;
	mul.f32 	%f26, %f25, 0f3F000000;
	ld.global.v4.u32 	{%r10, %r11, %r12, %r13}, [%rd4+16];
	ld.global.v4.f32 	{%f27, %f28, %f29, %f30}, [%rd4];
	mul.f32 	%f2, %f18, %f27;
	// inline asm
	cvt.rmi.f32.f32 	%f1, %f2;
	// inline asm
	cvt.rzi.s32.f32	%r14, %f1;
	add.s32 	%r16, %r10, -1;
	and.b32  	%r17, %r14, %r16;
	mul.f32 	%f4, %f22, %f28;
	// inline asm
	cvt.rmi.f32.f32 	%f3, %f4;
	// inline asm
	cvt.rzi.s32.f32	%r18, %f3;
	add.s32 	%r20, %r11, -1;
	and.b32  	%r21, %r18, %r20;
	mul.f32 	%f6, %f26, %f29;
	// inline asm
	cvt.rmi.f32.f32 	%f5, %f6;
	// inline asm
	cvt.rzi.s32.f32	%r22, %f5;
	add.s32 	%r24, %r12, -1;
	and.b32  	%r25, %r22, %r24;
	mad.lo.s32 	%r26, %r25, %r11, %r21;
	mad.lo.s32 	%r27, %r26, %r10, %r17;
	mul.wide.s32 	%rd9, %r1, 8;
	add.s64 	%rd10, %rd3, %rd9;
	st.global.v2.u32 	[%rd10], {%r27, %r1};

BB0_2:
	ret;
}

	// .globl	kClearCellStart
.entry kClearCellStart(
	.param .u32 kClearCellStart_param_0,
	.param .u64 .ptr .global .align 4 kClearCellStart_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<4>;


	ld.param.u32 	%r2, [kClearCellStart_param_0];
	ld.param.u64 	%rd1, [kClearCellStart_param_1];
	mov.b32	%r3, %envreg3;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mad.lo.s32 	%r6, %r4, %r5, %r3;
	mov.u32 	%r7, %tid.x;
	add.s32 	%r1, %r6, %r7;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_2;

	mul.wide.s32 	%rd2, %r1, 4;
	add.s64 	%rd3, %rd1, %rd2;
	mov.u32 	%r8, -1;
	st.global.u32 	[%rd3], %r8;

BB1_2:
	ret;
}

	// .globl	kFindCellStart
.entry kFindCellStart(
	.param .u32 kFindCellStart_param_0,
	.param .u64 .ptr .global .align 8 kFindCellStart_param_1,
	.param .u64 .ptr .global .align 4 kFindCellStart_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<16>;
	// demoted variable
	.shared .align 4 .b8 kFindCellStart$sharedHash[2052];

	ld.param.u32 	%r7, [kFindCellStart_param_0];
	ld.param.u64 	%rd3, [kFindCellStart_param_1];
	ld.param.u64 	%rd4, [kFindCellStart_param_2];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r1, %tid.x;
	add.s32 	%r2, %r13, %r1;
	cvt.s64.s32	%rd1, %r2;
	mul.wide.s32 	%rd5, %r1, 4;
	mov.u64 	%rd6, kFindCellStart$sharedHash;
	add.s64 	%rd2, %rd6, %rd5;
	setp.ge.s32	%p1, %r2, %r7;
	@%p1 bra 	BB2_3;

	mul.wide.s32 	%rd7, %r2, 8;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.v2.u32 	{%r22, %r17}, [%rd8];
	st.shared.u32 	[%rd2+4], %r22;
	setp.ne.s32	%p2, %r1, 0;
	setp.lt.s32	%p3, %r2, 1;
	or.pred  	%p4, %p3, %p2;
	@%p4 bra 	BB2_3;

	shl.b64 	%rd9, %rd1, 32;
	add.s64 	%rd10, %rd9, -4294967296;
	shr.s64 	%rd11, %rd10, 32;
	shl.b64 	%rd12, %rd11, 3;
	add.s64 	%rd13, %rd3, %rd12;
	ld.global.v2.u32 	{%r18, %r19}, [%rd13];
	st.shared.u32 	[kFindCellStart$sharedHash], %r18;

BB2_3:
	bar.sync 	0;
	@%p1 bra 	BB2_7;

	setp.eq.s32	%p6, %r2, 0;
	@%p6 bra 	BB2_6;

	ld.shared.u32 	%r21, [%rd2];
	setp.eq.s32	%p7, %r22, %r21;
	@%p7 bra 	BB2_7;

BB2_6:
	mul.wide.s32 	%rd14, %r22, 4;
	add.s64 	%rd15, %rd4, %rd14;
	st.global.u32 	[%rd15], %r2;

BB2_7:
	ret;
}

	// .globl	kFindOverlappingPairs
.entry kFindOverlappingPairs(
	.param .u32 kFindOverlappingPairs_param_0,
	.param .u64 .ptr .global .align 16 kFindOverlappingPairs_param_1,
	.param .u64 .ptr .global .align 4 kFindOverlappingPairs_param_2,
	.param .u64 .ptr .global .align 8 kFindOverlappingPairs_param_3,
	.param .u64 .ptr .global .align 4 kFindOverlappingPairs_param_4,
	.param .u64 .ptr .global .align 16 kFindOverlappingPairs_param_5,
	.param .u64 .ptr .global .align 4 kFindOverlappingPairs_param_6,
	.param .u64 .ptr .global .align 16 kFindOverlappingPairs_param_7,
	.param .u32 kFindOverlappingPairs_param_8
)
{
	.reg .pred 	%p<61>;
	.reg .f32 	%f<133>;
	.reg .b32 	%r<201>;
	.reg .b64 	%rd<66>;


	ld.param.u32 	%r89, [kFindOverlappingPairs_param_0];
	ld.param.u64 	%rd15, [kFindOverlappingPairs_param_1];
	ld.param.u64 	%rd16, [kFindOverlappingPairs_param_2];
	ld.param.u64 	%rd17, [kFindOverlappingPairs_param_3];
	ld.param.u64 	%rd18, [kFindOverlappingPairs_param_4];
	ld.param.u64 	%rd19, [kFindOverlappingPairs_param_5];
	ld.param.u64 	%rd20, [kFindOverlappingPairs_param_6];
	ld.param.u64 	%rd21, [kFindOverlappingPairs_param_7];
	ld.param.u32 	%r90, [kFindOverlappingPairs_param_8];
	mov.b32	%r91, %envreg3;
	mov.u32 	%r92, %ctaid.x;
	mov.u32 	%r93, %ntid.x;
	mad.lo.s32 	%r94, %r92, %r93, %r91;
	mov.u32 	%r95, %tid.x;
	add.s32 	%r1, %r94, %r95;
	setp.ge.s32	%p1, %r1, %r89;
	@%p1 bra 	BB3_38;

	mul.wide.s32 	%rd22, %r1, 8;
	add.s64 	%rd1, %rd17, %rd22;
	ld.global.v2.u32 	{%r101, %r102}, [%rd1];
	mul.wide.s32 	%rd23, %r102, 4;
	add.s64 	%rd24, %rd16, %rd23;
	ld.global.u32 	%r104, [%rd24];
	shl.b32 	%r105, %r104, 1;
	mul.wide.s32 	%rd25, %r105, 16;
	add.s64 	%rd26, %rd15, %rd25;
	ld.global.v4.f32 	{%f49, %f50, %f51, %f52}, [%rd26];
	ld.global.v4.f32 	{%f54, %f55, %f56, %f57}, [%rd26+16];
	add.f32 	%f59, %f49, %f54;
	mul.f32 	%f60, %f59, 0f3F000000;
	add.f32 	%f63, %f50, %f55;
	mul.f32 	%f64, %f63, 0f3F000000;
	add.f32 	%f67, %f51, %f56;
	mul.f32 	%f68, %f67, 0f3F000000;
	ld.global.v4.u32 	{%r106, %r107, %r108, %r109}, [%rd19+16];
	ld.global.v4.f32 	{%f69, %f70, %f71, %f72}, [%rd19];
	mul.f32 	%f44, %f60, %f69;
	// inline asm
	cvt.rmi.f32.f32 	%f43, %f44;
	// inline asm
	cvt.rzi.s32.f32	%r110, %f43;
	add.s32 	%r112, %r106, -1;
	mov.u32 	%r96, -1;
	and.b32  	%r2, %r110, %r112;
	mul.f32 	%f46, %f64, %f70;
	// inline asm
	cvt.rmi.f32.f32 	%f45, %f46;
	// inline asm
	cvt.rzi.s32.f32	%r113, %f45;
	add.s32 	%r115, %r107, -1;
	and.b32  	%r3, %r113, %r115;
	mul.f32 	%f48, %f68, %f71;
	// inline asm
	cvt.rmi.f32.f32 	%f47, %f48;
	// inline asm
	cvt.rzi.s32.f32	%r116, %f47;
	add.s32 	%r118, %r108, -1;
	and.b32  	%r4, %r116, %r118;
	add.s32 	%r5, %r2, -1;
	add.s32 	%r6, %r2, 1;
	mov.u32 	%r196, %r96;

BB3_2:
	add.s32 	%r14, %r196, %r4;
	mov.u32 	%r197, %r96;

BB3_3:
	add.s32 	%r21, %r197, %r3;
	ld.global.v4.u32 	{%r124, %r125, %r126, %r127}, [%rd19+16];
	add.s32 	%r128, %r124, -1;
	and.b32  	%r129, %r128, %r5;
	add.s32 	%r130, %r125, -1;
	and.b32  	%r131, %r130, %r21;
	add.s32 	%r132, %r126, -1;
	and.b32  	%r133, %r132, %r14;
	mad.lo.s32 	%r134, %r133, %r125, %r131;
	mad.lo.s32 	%r27, %r134, %r124, %r129;
	mul.wide.s32 	%rd27, %r27, 4;
	add.s64 	%rd28, %rd18, %rd27;
	ld.global.u32 	%r198, [%rd28];
	setp.eq.s32	%p2, %r198, -1;
	@%p2 bra 	BB3_14;

	ld.global.v2.u32 	{%r135, %r136}, [%rd1];
	mul.wide.s32 	%rd29, %r136, 4;
	add.s64 	%rd30, %rd16, %rd29;
	ld.global.u32 	%r137, [%rd30];
	shl.b32 	%r138, %r137, 1;
	mul.wide.s32 	%rd31, %r138, 16;
	add.s64 	%rd3, %rd15, %rd31;
	ld.global.v4.f32 	{%f76, %f77, %f78, %f79}, [%rd3];
	mov.b32 	 %r30, %f79;
	add.s32 	%r139, %r127, %r198;
	min.s32 	%r31, %r89, %r139;
	setp.ge.s32	%p3, %r198, %r31;
	@%p3 bra 	BB3_14;

	setp.eq.s64	%p4, %rd20, 0;
	@%p4 bra 	BB3_14;

	ld.global.v4.f32 	{%f80, %f81, %f82, %f83}, [%rd3+16];
	mul.wide.s32 	%rd32, %r198, 8;
	add.s64 	%rd63, %rd17, %rd32;

BB3_7:
	ld.global.v2.u32 	{%r143, %r144}, [%rd63];
	setp.ne.s32	%p5, %r143, %r27;
	@%p5 bra 	BB3_14;

	setp.eq.s32	%p6, %r144, %r136;
	@%p6 bra 	BB3_13;

	mul.wide.s32 	%rd33, %r144, 4;
	add.s64 	%rd34, %rd16, %rd33;
	ld.global.u32 	%r145, [%rd34];
	shl.b32 	%r146, %r145, 1;
	mul.wide.s32 	%rd35, %r146, 16;
	add.s64 	%rd36, %rd15, %rd35;
	ld.global.v4.f32 	{%f84, %f85, %f86, %f87}, [%rd36+16];
	setp.gtu.f32	%p7, %f76, %f84;
	ld.global.v4.f32 	{%f89, %f90, %f91, %f92}, [%rd36];
	setp.gtu.f32	%p8, %f89, %f80;
	or.pred  	%p9, %p7, %p8;
	setp.gtu.f32	%p10, %f77, %f85;
	or.pred  	%p11, %p9, %p10;
	setp.gtu.f32	%p12, %f90, %f81;
	or.pred  	%p13, %p11, %p12;
	setp.gtu.f32	%p14, %f78, %f86;
	or.pred  	%p15, %p13, %p14;
	setp.gtu.f32	%p16, %f91, %f82;
	or.pred  	%p17, %p16, %p15;
	@%p17 bra 	BB3_13;

	mov.b32 	 %r40, %f92;
	setp.ge.s32	%p18, %r30, %r40;
	@%p18 bra 	BB3_13;

	atom.global.add.u32 	%r41, [%rd20], 1;
	setp.ge.s32	%p19, %r41, %r90;
	@%p19 bra 	BB3_13;

	mov.u32 	%r147, -1;
	mul.wide.s32 	%rd37, %r41, 16;
	add.s64 	%rd38, %rd21, %rd37;
	st.global.v4.u32 	[%rd38], {%r30, %r40, %r147, %r147};

BB3_13:
	add.s32 	%r198, %r198, 1;
	add.s64 	%rd63, %rd63, 8;
	setp.lt.s32	%p20, %r198, %r31;
	@%p20 bra 	BB3_7;

BB3_14:
	ld.global.v4.u32 	{%r148, %r149, %r150, %r151}, [%rd19+16];
	add.s32 	%r152, %r148, -1;
	and.b32  	%r153, %r152, %r2;
	add.s32 	%r154, %r149, -1;
	and.b32  	%r155, %r154, %r21;
	add.s32 	%r156, %r150, -1;
	and.b32  	%r157, %r156, %r14;
	mad.lo.s32 	%r158, %r157, %r149, %r155;
	mad.lo.s32 	%r47, %r158, %r148, %r153;
	mul.wide.s32 	%rd39, %r47, 4;
	add.s64 	%rd40, %rd18, %rd39;
	ld.global.u32 	%r199, [%rd40];
	setp.eq.s32	%p21, %r199, -1;
	@%p21 bra 	BB3_25;

	ld.global.v2.u32 	{%r159, %r160}, [%rd1];
	mul.wide.s32 	%rd41, %r160, 4;
	add.s64 	%rd42, %rd16, %rd41;
	ld.global.u32 	%r161, [%rd42];
	shl.b32 	%r162, %r161, 1;
	mul.wide.s32 	%rd43, %r162, 16;
	add.s64 	%rd7, %rd15, %rd43;
	ld.global.v4.f32 	{%f95, %f96, %f97, %f98}, [%rd7];
	mov.b32 	 %r50, %f98;
	add.s32 	%r163, %r151, %r199;
	min.s32 	%r51, %r89, %r163;
	setp.ge.s32	%p22, %r199, %r51;
	@%p22 bra 	BB3_25;

	setp.eq.s64	%p23, %rd20, 0;
	@%p23 bra 	BB3_25;

	ld.global.v4.f32 	{%f99, %f100, %f101, %f102}, [%rd7+16];
	mul.wide.s32 	%rd44, %r199, 8;
	add.s64 	%rd64, %rd17, %rd44;

BB3_18:
	ld.global.v2.u32 	{%r167, %r168}, [%rd64];
	setp.ne.s32	%p24, %r167, %r47;
	@%p24 bra 	BB3_25;

	setp.eq.s32	%p25, %r168, %r160;
	@%p25 bra 	BB3_24;

	mul.wide.s32 	%rd45, %r168, 4;
	add.s64 	%rd46, %rd16, %rd45;
	ld.global.u32 	%r169, [%rd46];
	shl.b32 	%r170, %r169, 1;
	mul.wide.s32 	%rd47, %r170, 16;
	add.s64 	%rd48, %rd15, %rd47;
	ld.global.v4.f32 	{%f103, %f104, %f105, %f106}, [%rd48+16];
	setp.gtu.f32	%p26, %f95, %f103;
	ld.global.v4.f32 	{%f108, %f109, %f110, %f111}, [%rd48];
	setp.gtu.f32	%p27, %f108, %f99;
	or.pred  	%p28, %p26, %p27;
	setp.gtu.f32	%p29, %f96, %f104;
	or.pred  	%p30, %p28, %p29;
	setp.gtu.f32	%p31, %f109, %f100;
	or.pred  	%p32, %p30, %p31;
	setp.gtu.f32	%p33, %f97, %f105;
	or.pred  	%p34, %p32, %p33;
	setp.gtu.f32	%p35, %f110, %f101;
	or.pred  	%p36, %p35, %p34;
	@%p36 bra 	BB3_24;

	mov.b32 	 %r60, %f111;
	setp.ge.s32	%p37, %r50, %r60;
	@%p37 bra 	BB3_24;

	atom.global.add.u32 	%r61, [%rd20], 1;
	setp.ge.s32	%p38, %r61, %r90;
	@%p38 bra 	BB3_24;

	mov.u32 	%r171, -1;
	mul.wide.s32 	%rd49, %r61, 16;
	add.s64 	%rd50, %rd21, %rd49;
	st.global.v4.u32 	[%rd50], {%r50, %r60, %r171, %r171};

BB3_24:
	add.s32 	%r199, %r199, 1;
	add.s64 	%rd64, %rd64, 8;
	setp.lt.s32	%p39, %r199, %r51;
	@%p39 bra 	BB3_18;

BB3_25:
	ld.global.v4.u32 	{%r172, %r173, %r174, %r175}, [%rd19+16];
	add.s32 	%r176, %r172, -1;
	and.b32  	%r177, %r176, %r6;
	add.s32 	%r178, %r173, -1;
	and.b32  	%r179, %r178, %r21;
	add.s32 	%r180, %r174, -1;
	and.b32  	%r181, %r180, %r14;
	mad.lo.s32 	%r182, %r181, %r173, %r179;
	mad.lo.s32 	%r71, %r182, %r172, %r177;
	mul.wide.s32 	%rd51, %r71, 4;
	add.s64 	%rd52, %rd18, %rd51;
	ld.global.u32 	%r200, [%rd52];
	setp.eq.s32	%p40, %r200, -1;
	@%p40 bra 	BB3_36;

	ld.global.v2.u32 	{%r183, %r184}, [%rd1];
	mul.wide.s32 	%rd53, %r184, 4;
	add.s64 	%rd54, %rd16, %rd53;
	ld.global.u32 	%r185, [%rd54];
	shl.b32 	%r186, %r185, 1;
	mul.wide.s32 	%rd55, %r186, 16;
	add.s64 	%rd11, %rd15, %rd55;
	ld.global.v4.f32 	{%f114, %f115, %f116, %f117}, [%rd11];
	mov.b32 	 %r74, %f117;
	add.s32 	%r187, %r175, %r200;
	min.s32 	%r75, %r89, %r187;
	setp.ge.s32	%p41, %r200, %r75;
	@%p41 bra 	BB3_36;

	setp.eq.s64	%p42, %rd20, 0;
	@%p42 bra 	BB3_36;

	ld.global.v4.f32 	{%f118, %f119, %f120, %f121}, [%rd11+16];
	mul.wide.s32 	%rd56, %r200, 8;
	add.s64 	%rd65, %rd17, %rd56;

BB3_29:
	ld.global.v2.u32 	{%r191, %r192}, [%rd65];
	setp.ne.s32	%p43, %r191, %r71;
	@%p43 bra 	BB3_36;

	setp.eq.s32	%p44, %r192, %r184;
	@%p44 bra 	BB3_35;

	mul.wide.s32 	%rd57, %r192, 4;
	add.s64 	%rd58, %rd16, %rd57;
	ld.global.u32 	%r193, [%rd58];
	shl.b32 	%r194, %r193, 1;
	mul.wide.s32 	%rd59, %r194, 16;
	add.s64 	%rd60, %rd15, %rd59;
	ld.global.v4.f32 	{%f122, %f123, %f124, %f125}, [%rd60+16];
	setp.gtu.f32	%p45, %f114, %f122;
	ld.global.v4.f32 	{%f127, %f128, %f129, %f130}, [%rd60];
	setp.gtu.f32	%p46, %f127, %f118;
	or.pred  	%p47, %p45, %p46;
	setp.gtu.f32	%p48, %f115, %f123;
	or.pred  	%p49, %p47, %p48;
	setp.gtu.f32	%p50, %f128, %f119;
	or.pred  	%p51, %p49, %p50;
	setp.gtu.f32	%p52, %f116, %f124;
	or.pred  	%p53, %p51, %p52;
	setp.gtu.f32	%p54, %f129, %f120;
	or.pred  	%p55, %p54, %p53;
	@%p55 bra 	BB3_35;

	mov.b32 	 %r84, %f130;
	setp.ge.s32	%p56, %r74, %r84;
	@%p56 bra 	BB3_35;

	atom.global.add.u32 	%r85, [%rd20], 1;
	setp.ge.s32	%p57, %r85, %r90;
	@%p57 bra 	BB3_35;

	mov.u32 	%r195, -1;
	mul.wide.s32 	%rd61, %r85, 16;
	add.s64 	%rd62, %rd21, %rd61;
	st.global.v4.u32 	[%rd62], {%r74, %r84, %r195, %r195};

BB3_35:
	add.s32 	%r200, %r200, 1;
	add.s64 	%rd65, %rd65, 8;
	setp.lt.s32	%p58, %r200, %r75;
	@%p58 bra 	BB3_29;

BB3_36:
	add.s32 	%r197, %r197, 1;
	setp.lt.s32	%p59, %r197, 2;
	@%p59 bra 	BB3_3;

	add.s32 	%r196, %r196, 1;
	setp.lt.s32	%p60, %r196, 2;
	@%p60 bra 	BB3_2;

BB3_38:
	ret;
}


  